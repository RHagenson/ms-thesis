#!/usr/bin/python

# Name: Ryan Hagenson
# Email: rhagenson@unomaha.edu

import os
import tempfile
from datetime import datetime
from getopt import GetoptError, getopt
import sys
from operator import itemgetter
from os import path, makedirs, walk
from csv import reader, writer

from os.path import basename

logs_dir = "../../R/outputs/"  # Location of the logs generated by R Monte carlo
now = datetime.now().strftime("%d-%m-%y")  # Default run time
isoformsSubDirName = "isoforms"


# General directory tree within dataDir is:
# ./allMuts
# ./refSeq
# ./refSeq/iupredLong
# ./refSeq/iupredShort
# ./refSeq/hmmer
# ./cds
# ./allMAFs
# ./pfam30.0
# ./profiles

# ./profiles will have subdirectories based on cancer type, then by gene id
# ./profiles/isoforms/ contains cancer-independent profiles of all isoforms


def main():
    """
    A simple wrapper for all CLI options
    """
    global logs_dir, now

    # Enables command-line options via getopt and sys packages
    try:
        opts, args = getopt(sys.argv[1:],
                            'l:d:',
                            ["logsDir=", "date="]
                            )
    except GetoptError as err:
        # Redirect STDERR to STDOUT (ensures screen display)
        sys.stdout = sys.stderr
        # Print help information
        print(str(err))
        # Print usage information
        # usage()
        # Exit
        sys.exit(2)

    # Configure the action of each CLI option
    # First loop for global variables with defaults
    for (opt, arg) in opts:
        if opt in ("-d", "--date"):
            now = arg

    for (opt, arg) in opts:
        if opt in ("-l", "--logsDir"):  # Where profiles are found
            # Create profiles directory with now date
            logs_dir = path.join(arg, now)


#
# Note that this loops through every cancer within the outputs/DD-MM-YY/ tree
# It checks if both output concatenated files already exists and if not
# then collect the LOG.csv files for that cancer type and generates concat files
#
def concat_cancer_logs(log_dir=logs_dir):
    """
    :return: A single file per cancer type of the complete LOGs
    """

    cancer_types = os.listdir(log_dir)
    cancer_types.remove(isoformsSubDirName)  # Remove "isoforms" directory

    for type in cancer_types:
        # Final files
        concateLong = path.join(log_dir, type, type + "_LONG_LOG.csv")
        concateShort = path.join(log_dir, type, type + "_SHORT_LOG.csv")

        # Skip those cancers that have previously been processed
        if os.path.isfile(concateLong) & os.path.isfile(concateShort):
            continue

        # Open concatenated files for writing
        # TMP files are unsorted while the final LONG and SHORT are sorted
        # alphabetically by isoform.
        TMP_LONG = open(path.join(tempfile.gettempdir(),
                                  type + "_LONG_LOG.csv"), "w")
        LONG_CSV = writer(TMP_LONG, delimiter=',')
        LONG = writer(open(concateLong, "w"), delimiter=",")

        TMP_SHORT = open(path.join(tempfile.gettempdir(),
                                   type + "_SHORT_LOG.csv"), "w")
        SHORT_CSV = writer(TMP_SHORT, delimiter=',')
        SHORT = writer(open(concateShort, "w"), delimiter=",")

        # Inform user of what is being done
        print("Concatenating the LOG.csv files for: " + str(type))

        # Loop through the tree and write each LOG.csv to the correct file
        for (dirpath, dirnames, filenames) in walk(path.join(log_dir, type)):
            # Find each LOG.csv file
            for log_file in filenames:
                if log_file == "LOG.csv":
                    # Open the file
                    try:
                        CSV = reader(open(path.join(dirpath, log_file), "r"),
                                     delimiter=",")
                    except IOError as e:
                        print(str(e))  # send the error out for bug tracking
                        continue  # Move to the next file

                    # Determine which file to write to: LONG_CSV or SHORT_CSV
                    # Write to LONG_CSV
                    if ".long" in basename(dirpath):
                        for long_list in CSV:
                            LONG_CSV.writerow(long_list)

                    # Write to SHORT_CSV
                    elif ".short" in basename(dirpath):
                        for long_list in CSV:
                            SHORT_CSV.writerow(long_list)

        # Close the TMP files and open for them reading
        TMP_LONG.close()
        TMP_SHORT.close()
        TMP_LONG = open(path.join(tempfile.gettempdir(),
                                  type + "_LONG_LOG.csv"), "r")
        TMP_SHORT = open(path.join(tempfile.gettempdir(),
                                   type + "_SHORT_LOG.csv"), "r")

        # Sort the file based on isoform name
        SORT_LONG = sorted(reader(TMP_LONG,
                                  delimiter=','),
                           key=itemgetter(0))
        SORT_SHORT = sorted(reader(TMP_SHORT,
                                   delimiter=','),
                            key=itemgetter(0))

        # Protect against overflow
        for row in SORT_LONG:
            LONG.writerow(row)
        for row in SORT_SHORT:
            SHORT.writerow(row)


if __name__ == "__main__":
    # Run the CLI wrapper to change global variables
    main()

    # Run the program
    concat_cancer_logs(logs_dir)
